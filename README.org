* Katti who? 
Katti lets you do awesome stuff ðŸš€ 

Katti is in the development phase. We are continuously working on improving Katti and adding new features. Therefore, we will release new versions at regular intervals. Do you have a question or an idea for a cool feature? Don't hesitate to contact us.

The development of Katti is started as a pure crawling framework. In the meantime, Katti not only offers the possibility to automatically load websites and store the data, but also provides the tools to analyze the obtained data. The goal is to develop a scalable platform that allows an easy automated analysis of websites and their infrastructure. 

** Demo-VMs:
To try out Katti quickly and easily, we have prepared two demo VMs. Within the first VM (Backbone) RabbitMQ, MongoDB and Redis are already installed. Furthermore, the prototype of the GUI is included there. We create the GUI with the GUI builder Appsmith and at the moment it is only included in the demo VM. But soon it will be possible to integrate our Katti app into an Appsmith instance. The second VM (Celery) contains everything needed to start a crawler. Both VMs are available as exported VirtualBox machines and can be downloaded [[https://my.hidrive.com/share/a-kggz.hbq][here]].

Our recommendation is to start the Backbone VM with at least 4 CPU cores and 6 GB RAM. The Celery VM should be allocated at least the same resources. We recommend 2 CPU cores and 2 GB RAM per started Celery worker. It is necessary that both VMs can communicate with each other. The easiest way to do this is to use bridge mode.

Steps to do fancy stuff:
1. Start the Backbone VM and login via SSH (user:user)
2. Edit the followingen config files and add the IP of the Backbone VM (Be careful, YAML is sensitive to indentations.):
  #+begin_src sh :results output
~/docker-compose.yml
~/katti/config/celery.yml
~/katti/config/database_configs.yml
 #+end_src
3. Restart Appsmith:
  #+begin_src sh :results output
$ cd ~
$ docker-compose up -d
 #+end_src
3. If you want to use VirusTotal, Shodan or Google Safe Browsing, replace the wildcards in the following config files:
   - ~/katti/config/Scanner/shodan_config.yml
   - ~/katti/config/Scanner/vt_config.yml
   - ~/katti/config/Scanner/gsb_config.yml
4. The next stepp will prepare the database:
  #+begin_src sh :results output
$ cd ~katti/source_code/Scripts
$ ~/venv/bin/python3.10 SetupKatti.py
 #+end_src
5. Start the API server:
  #+begin_src sh :results output
$ screen -S api 
$ source venv/bin/activate
$ cd katti/source_code/FastApi
$ uvicorn FastAPIApp:app --host 0.0.0.0 --port 8000
$ CRTL+a+d
 #+end_src
6. Start the necessary celery workers
  #+begin_src sh :results output
$ screen -S celery
$ source venv/bin/activate
$ cd katti/source_code/CeleryApps
$ celery -A KattiApp worker -Q crawling_request,crawling_analysis,scanning --concurrency=6
$ CRTL+a+d
#+end_src
7. Now the Backbone VM is ready.
8. Start theCelery VM and login via SSH (user:user)
9. Edit the followingen config files and add the IP of the Backbone VM (Be careful, YAML is sensitive to indentations.):
  #+begin_src sh :results output
~/katti/config/celery.yml
~/katti/config/database_configs.yml
 #+end_sr
10. Start the crawling celery workers:
  #+begin_src sh :results output
$ screen -S celery
$ source venv/bin/activate
$ cd katti/source_code/CeleryApps
$ celery -A KattiApp worker -Q crawling_crawling --concurrency=2 (It is possible to launch more workers, but then keep an eye on the resources.)
$ CRTL+a+d
#+end_src
11. If you want to use Google Safe Browsing, log into the Backbone VM and start the GSB docker as follows:
  #+begin_src sh :results output
$ docker run -d gsb:latest -apikey <Your key> -srvaddr 0.0.0.0:8080
 #+end_src
You can check status https://<Backbone IP>:8080/status
Now everything is ready.

11. Launch a browser and open the following URL http://<Backbone VM IP>:8082/app/katti/tardis-hq-63de2ca46f70f844ff712ab1 to start your first crawl. Also in the app you will find a section Experiment. There you will find an easy way to repeat our experiment. It is also possible to log into Appsmith, the login is drwho:tardis. The credentials for the MongoDB instance are also drwho:tardis.



** Tools we are using togehter with Katti:
- To monitor celey: [[https://flower.readthedocs.io/en/latest/][flower]]
- Data exploration and dashboards: [[https://www.metabase.com/][Metabase]]
- GUI builder: [[https://www.appsmith.com/][Appsmith]]

** Requirements
- GNU/Linux based operating system (tested on Ubuntu 20.04 and Arch Linux)
- [[https://www.python.org/][Python >= 3.10]] (tested on Python 3.10)
- Celery backend and cache: [[https://redis.io/][Redis]]
- Message broker: [[https://www.rabbitmq.com/][RabbitMQ]]
- Web server: [[https://www.uvicorn.org/][Uvicorn]]
- Database: [[https://www.mongodb.com/][MongoDB]]
- [[https://www.docker.com/][Docker]]

Minimum tested hardware requirements: 8 core CPU, 12 GB RAM.
As for the operating system, we recommend Ubuntu 20.04, as newer versions might not work with MongoDB.


** Installation instructions
1. Install the required software listed above.
2. Configure the maximum memory that Redis can use by editing your =/etc/redis.conf=. Uncomment the line =# maxmemory <bytes>= and replace =<bytes>= with an appropriate value for your system, for example =2g= for 2 GB. Make sure to restart the redis
   service after changing the config file by running:
   #+begin_src sh :results output
$ sudo systemctl restart redis.service
   #+end_src
3. Clone this repository into your home directory:
   #+begin_src sh :results output
$ git clone https://github.com/Flojo-der-erste/Katti.git ~/
   #+end_src
4. Optionally, set up and activate a virtual environment:
  #+begin_src sh :results output
$ cd ~/katti
$ pip install virtualenv
$ virtualenv venv
$ source venv/bin/activate
  #+end_src
  Make sure that you use the correct Python version. We recommend Python 3.10.
5. Install the dependencies:
   #+begin_src sh :results output
$ cd source_code
$ pip install -r requirements
   #+end_src
6. If you want to use VirusTotal, Shodan or Google Safe Browsing, replace the wildcards in the following config files:
   - ~/katti/config/Scanner/shodan_config.yml
   - ~/katti/config/Scanner/vt_config.yml
   - ~/katti/config/Scanner/gsb_config.yml
7. Run the setup script:
   #+begin_src sh :results output
$ python setup.py install
   #+end_src
8. Run the KattiSetup script:
   #+begin_src sh :results output
$ python Scripts/KattiSetup.py
   #+end_src
9. Create the docker image for the crawling:
   #+begin_src sh :results output
$ cd ~/katti
$ docker build -f Docker/Crawling/Dockerfile . -t crawler:latest
   #+end_src
10. If you want to use Google-Safe-Browsing create the nesseary docker image:
   #+begin_src sh :results output
$ cd ~/katti
$ docker build -f Docker/GSB/Dockerfile . -t gsb:latest
   #+end_src
Now Katti ist ready and you can use the systems like the demo VMs.



** Next steps:
- Publish a GUI for working and manage Katti
- Adding an Usermanagement
- Creation of detailed user documentation


